import { parseEther } from 'viem';
import { useWalletClient, usePublicClient } from 'wagmi';

// Contract ABI from your compiled contract
export const roscaAbi = [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ContributionMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "ParticipantRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PoolDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "RoundStarted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "actualTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "canClaimPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contributionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "roundNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalContributed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isDistributed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasContributed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "participantList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "participants",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastPaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerParticipant",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "distributed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalContributed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalParticipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ] as const;

// Contract bytecode from your compiled contract
export const roscaBytecode = "";

// Types for contract interaction
export interface DeployParams {
  numberOfParticipants: number;
  totalAmount: number; // in ETH
}

export interface RoscaContractData {
  totalParticipants: bigint;
  totalAmount: bigint;
  contributionAmount: bigint;
  currentRound: bigint;
  participants: string[];
}

// Deployment function
export const deployRoscaContract = async (
  walletClient: any,
  publicClient: any,
  params: DeployParams
): Promise<string> => {
  try {
    // Get the connected account
    const [account] = await walletClient.getAddresses();

    // Calculate contribution amount (totalAmount / numberOfParticipants)
    const contributionAmount = params.totalAmount / params.numberOfParticipants;

    console.log('Deploying ROSCA contract with params:', {
      numberOfParticipants: params.numberOfParticipants,
      totalAmount: params.totalAmount,
      contributionAmount: contributionAmount,
      account: account
    });

    console.log('Contract args:', [
      BigInt(params.numberOfParticipants),
      parseEther(params.totalAmount.toString())
    ]);
    console.log('Value being sent:', parseEther(contributionAmount.toString()));

    // Deploy the contract
    const hash = await walletClient.deployContract({
      account,
      abi: roscaAbi,
      bytecode: roscaBytecode,
      args: [
        BigInt(params.numberOfParticipants),
        parseEther(params.totalAmount.toString())
      ],
      value: parseEther(contributionAmount.toString()),
    });

    console.log('Deployment transaction hash:', hash);

    // Wait for deployment to complete using public client
    const receipt = await publicClient.waitForTransactionReceipt({ hash });
    console.log('Contract deployed at address:', receipt.contractAddress);

    return receipt.contractAddress!;
  } catch (error) {
    console.error('Error deploying contract:', error);
    console.error('Error details:', {
      message: error.message,
      code: error.code,
      data: error.data,
      stack: error.stack
    });
    throw error;
  }
};

// React hook for contract deployment
export const useContractDeployment = () => {
  const { data: walletClient } = useWalletClient();
  const publicClient = usePublicClient();

  const deployContract = async (params: DeployParams): Promise<string> => {
    if (!walletClient) {
      throw new Error('Wallet not connected');
    }
    if (!publicClient) {
      throw new Error('No public client');
    }
    return deployRoscaContract(walletClient, publicClient, params);
  };

  return { deployContract };
};
